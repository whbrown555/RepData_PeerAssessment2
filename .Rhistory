makeVector()
cachemean(m)
makeVector(x)
cachemean(m)
cachemean()
cachemean(x)
rm(x)
View(makeVector)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
cachemean(m)
makeVector()
cachemean(m)
rm(m)
makeVector()
View(getmean)
View(getmean)
View(makeVector)
View(set)
View(setmean)
setmean()
superV <- makeVector(1:20)
superV <- makeVector()
superV
cachemean(superV)
cachemean(m)
cachemean(superV)
superV
superV <- makeVector(1:10)
superV
cachemean(superV)
cachemean(superV)
superV <- makeVector(1:10)
cachemean(superV)
cachemean(superV)
rm(list = ls())
source('~/DataScience/R_Programming/week3/src/cachemean.R')
source('~/DataScience/R_Programming/week3/src/makeVector.R')
superV <- makeVector(1:10)
cachemean(superV)
cachemean(superV)
cachemean(superV)
source('~/DataScience/R_Programming/week3/src/makeVector.R')
superV <- makeVector(1:10)
cachemean(superV)
cachemean(superV)
rm(lis)
rm(list = ls())
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
library()
library(datasets)
data("mtcars")
mtcars
makeCacheMatrix(as.matrix(mtcars))
MyMtx <- makeCacheMatrix(as.matrix(mtcars))
cacheSolve(MyMtx)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(MyMtx)
View(mtcars)
rm(mtcars[12:32,])
View(mtcars)
myCars <- mtcars[1:11,]
MyMtx <- makeCacheMatrix(as.matrix(mtcars[1:11,]))
cacheSolve(MyMtx)
cacheSolve(MyMtx)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
str(mtcars)
hilbert(1000)
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+”)
}
x <- hilbert(1000)
system.time(svd(x))
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+”)
}
x <- hilbert(1000)
hilbert <- function(n) {}
source('~/DataScience/R_Programming/week4/hilbert.R')
x <- hilbert(1000)
system.time(svd(x))
system.time(svd(x))
system.time(svd(x))
system.time(svd(x))
system.time(svd(x))
system.time(svd(x))
x <- hilbert(10000)
system.time(svd(x))
rm(list = ls())
save.image("~/DataScience/R_Programming/rWkspc.wkspc.RData")
source('~/DataScience/R_Programming/week4/rankHospState.R')
packageVersion("swirl")
library(swirl)
install_course("Getting and Cleaning Data")
swirl()
View(rankHospState)
swirl()
swirl()
rm(list = ls())
getwd()
?Sys.getenv
body_acc_x_train <- read.table("~/DataScience/GettingAndCleaningData/Project/data/UCI_HAR_Dataset/train/Inertial Signals/body_acc_x_train.txt", quote="\"", comment.char="")
View(body_acc_x_train)
View(body_acc_x_train)
body_acc_x_train <- NULL
X_test <- read.table("~/DataScience/GettingAndCleaningData/Project/data/UCI_HAR_Dataset/test/X_test.txt", quote="\"", comment.char="")
View(X_test)
X_train <- read.table("~/DataScience/GettingAndCleaningData/Project/data/UCI_HAR_Dataset/train/X_train.txt", quote="\"", comment.char="")
View(X_train)
x_merged <- merge(X_test,X_train)
names(x_merged)
xm_vars<-names(x_merged)
features <- read.table("~/DataScience/GettingAndCleaningData/Project/data/UCI_HAR_Dataset/features.txt", quote="\"", comment.char="")
View(features)
colnames(x_merged) <- features[,2]
View(x_merged)
xm <- merge(x_merged,X_test,X_train)
x_merged <- merge(X_test,X_train)
?colnames
xm2 <- x_merged
x_merged <- null
x_merged <- NULL
x_merged <- merge(X_test,X_train)
?merge
rm(list = ls())
library(swirl)
swirl
library()
install.packages("swirl")
library(swirl)
swirl()
install.packages("ggplot2")
library(ggplot2)
swirl()
head()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green",breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = 12, lwd = 4, col = "magenta")
abline(v = median(ppm), lwd = 4, col = "magenta")
info()
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
boxplot(reg, col col = "wheat", main = "Number of Counties in Each Region")
boxplot(reg, col = "wheat", main = "Number of Counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(formula(pm25~region), data = "pollution", col = "red")
boxplot(formula(pm25~region), data = pollution, col = "red")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east < subset(pollution, pollution$region=="east")
east <- subset(pollution, pollution$region=="east")
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution$pm25, region=="west"), col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(12, lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude,west$pm25, main = "West")
plot(east$latitude,east$pm25, main = "East")
swirl
library(swirl)
swirl
swirl()
dist(dataFrame)
hclust(distxy)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="blue")
abline(h=.4, col="red")
5
abline(h=.05)
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2, mean)
tapply(y,newClust2, mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit( "addPatt.R")
myedit(file= "addPatt.R")
pathtofile("addPatt.R")
info()
play()
myedit( "addPatt.R")
myedit( "addPatt.R")
nxt()
nxt()
play()
nxt()
swirl()
rm(list = ls())
save.image("~/DataScience/R/.Rspace.RData")
load("C:/Users/William/OneDrive/Documents/.RData")
rm(list = ls())
save.image("C:/Users/William/OneDrive/Documents/.RData")
require(ggplot2)
# aggregate the data by the "tidy" event type
dead <- aggregate(FATALITIES ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
dead <- aggregate(FATALITIES ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
dead$NOAA_EVTYPE <- factor(dead$NOAA_EVTYPE,
levels = dead$NOAA_EVTYPE[order(-dead$FATALITIES)])
wounded <- aggregate(INJURIES ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
wounded <- aggregate(wounded ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
wounded$NOAA_EVTYPE <- factor(wounded$NOAA_EVTYPE,
levels = wounded$NOAA_EVTYPE[order(-wounded$wounded)])
property <- aggregate(PROPDMGVAL ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
property <- aggregate(PROPDMGVAL ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
property$NOAA_EVTYPE <- factor(property$NOAA_EVTYPE,
levels = property$NOAA_EVTYPE[order(-property$PROPDMGVAL)])
crops <- aggregate(CROPDMGVAL ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
crops <- aggregate(CROPDMGVAL ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
crops$NOAA_EVTYPE <- factor(crops$NOAA_EVTYPE,
levels = crops$NOAA_EVTYPE[order(-crops$CROPDMGVAL)])
require(ggplot2)
# Health Impact Analysis
gg1<- ggplot(dead[1:5,], aes(x = NOAA_EVTYPE, y = FATALITIES))
+ theme_economist()
+ scale_colour_economist()
+ geom_bar(stat = "identity")
+ xlab("NOAA Standard Event Type")
+  ylab("Fatalities")
+  ggtitle("Severe Storm Weather Highest Health Impact Event Types")
gg2<- ggplot(wounded[1:5,], aes(x = NOAA_EVTYPE, y = FATALITIES))
+ theme_economist()
+ scale_colour_economist()
+ geom_bar(stat = "identity")
+ xlab("NOAA Standard Event Type")
+  ylab("Injuries")
+  ggtitle("Severe Storm Weather Highest Health Impact Event Types")
require(grid)
pushViewport(viewport(layout = grid.layout(1, 2)))
print(gg1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(gg2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
# alternative, a little easier
require(gridExtra)
grid.arrange(gg1, gg2, ncol=2)
gg
require(ggplot2)
# Health Impact Analysis
gg1<- ggplot(dead[1:5,], aes(x = NOAA_EVTYPE, y = FATALITIES))
+ theme_economist()
+ scale_colour_economist()
+ geom_bar(stat = "identity")
+ xlab("NOAA Standard Event Type")
+  ylab("Fatalities")
+  ggtitle("Severe Storm Weather Highest Health Impact Event Types")
gg2<- ggplot(wounded[1:5,], aes(x = NOAA_EVTYPE, y = FATALITIES))
+ theme_economist()
+ scale_colour_economist()
+ geom_bar(stat = "identity")
+ xlab("NOAA Standard Event Type")
+  ylab("Injuries")
+  ggtitle("Severe Storm Weather Highest Health Impact Event Types")
require(grid)
# pushViewport(viewport(layout = grid.layout(1, 2)))
# print(gg1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
# print(gg2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
# alternative, a little easier
require(gridExtra)
grid.arrange(gg1, gg2, ncol=2)
require(gridExtra)
grid.arrange(gg1, gg2, ncol=2)
require(ggplot2)
# Health Impact Analysis
gg1<- ggplot(dead[1:5,], aes(x = NOAA_EVTYPE, y = FATALITIES))
+ theme_economist()
+ scale_colour_economist()
+ geom_bar(stat = "identity")
+ xlab("NOAA Standard Event Type")
+  ylab("Fatalities")
+  ggtitle("Severe Storm Weather Highest Health Impact Event Types")
gg2<- ggplot(wounded[1:5,], aes(x = NOAA_EVTYPE, y = FATALITIES))
+ theme_economist()
+ scale_colour_economist()
+ geom_bar(stat = "identity")
+ xlab("NOAA Standard Event Type")
+  ylab("Injuries")
+  ggtitle("Severe Storm Weather Highest Health Impact Event Types")
require(grid)
pushViewport(viewport(layout = grid.layout(1, 2)))
print(gg1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(gg2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
# alternative, a little easier
# require(gridExtra)
# grid.arrange(gg1, gg2, ncol=2)
require(ggplot2)
# Health Impact Analysis
gg1<- ggplot(dead[1:5,], aes(x = NOAA_EVTYPE, y = FATALITIES))
+ theme_economist()
+ scale_colour_economist()
+ geom_bar(stat = "identity")
+ xlab("NOAA Standard Event Type")
+  ylab("Fatalities")
# +  ggtitle("Severe Storm Weather Highest Health Impact Event Types")
gg2<- ggplot(wounded[1:5,], aes(x = NOAA_EVTYPE, y = FATALITIES))
+ theme_economist()
+ scale_colour_economist()
+ geom_bar(stat = "identity")
+ xlab("NOAA Standard Event Type")
+ ylab("Injuries")
# + ggtitle("Severe Storm Weather Highest Health Impact Event Types")
require(grid)
pushViewport(viewport(layout = grid.layout(1, 2)))
print(gg1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(gg2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
# alternative, a little easier
# require(gridExtra)
# grid.arrange(gg1, gg2, ncol=2)
rm(list = ls())
# Chunk 1
Sys.setlocale("LC_ALL", "English")
require(markdown)
require(knitr)
# Chunk 2: setup
knitr::opts_chunk$set(cache=TRUE)
# Chunk 3
setwd("~/GitHub/RepData_PeerAssessment2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2","repdata%2Fdata%2FStormData.csv.bz2")
stormData<-read.csv("repdata%2Fdata%2FStormData.csv.bz2")
# Chunk 4
sdata <- data.frame(stormData[,c(8,23, 24, 25,26, 27,28,36)], stringsAsFactors = FALSE)
# Chunk 5
levels(stormData$PROPDMGEXP)
summary(stormData$PROPDMGEXP)
stormData$PROPDMG[(stormData$PROPDMGEXP %in% c("?", "-", "+"))]
levels(stormData$CROPDMGEXP)
summary(stormData$CROPDMGEXP)
stormData$CROPDMG[(stormData$CROPDMGEXP %in% c("?", "-", "+"))]
# Chunk 6
# Ensure that the *EXP variables are of class "character" (vs. "factor")
sdata$PROPDMGEXP<-as.character(sdata$PROPDMGEXP)
sdata$CROPDMGEXP<-as.character(sdata$CROPDMGEXP)
# Transform the *EXP values to enable arithmetic operations
sdata$PROPDMGEXP[(sdata$PROPDMGEXP %in% c("B", "b"))] <-9
sdata$PROPDMGEXP[(sdata$PROPDMGEXP %in% c("M", "m"))] <-6
sdata$PROPDMGEXP[(sdata$PROPDMGEXP %in% c("K", "k"))] <-3
sdata$PROPDMGEXP[(sdata$PROPDMGEXP %in% c("H", "h"))] <-2
sdata$PROPDMGEXP[(sdata$PROPDMGEXP %in% c("", "?", "-", "+"))] <-0
sdata$CROPDMGEXP[(sdata$CROPDMGEXP %in% c("B", "b"))] <-9
sdata$CROPDMGEXP[(sdata$CROPDMGEXP %in% c("M", "m"))] <-6
sdata$CROPDMGEXP[(sdata$CROPDMGEXP %in% c("K", "k"))] <-3
sdata$CROPDMGEXP[(sdata$CROPDMGEXP %in% c("H", "h"))] <-2
sdata$CROPDMGEXP[(sdata$CROPDMGEXP %in% c("", "?", "-", "+"))] <-0
# convert *DMGEXP values to class "integer"" and calculate the normalized damage values
sdata$PROPDMGEXP<-as.integer(sdata$PROPDMGEXP)
sdata$CROPDMGEXP<-as.integer(sdata$CROPDMGEXP)
sdata$PROPDMGVAL <- sdata$PROPDMG * 10^sdata$PROPDMGEXP
sdata$CROPDMGVAL <- sdata$CROPDMG * 10^sdata$CROPDMGEXP
# Chunk 7
require(stringr)
sdata$EVTYPE <- toupper(sdata$EVTYPE)
sdata$EVTYPE <- str_trim(sdata$EVTYPE)
uev2 <- data.frame(unique(sdata$EVTYPE))
uev<-read.csv("NOAA_EVTYPES.csv")
sdata$INVALID_EVTYPE_IND <- 1
sdata$INVALID_EVTYPE_IND[(sdata$EVTYPE %in% uev$EVTYPE)] <- 0
sdata$OB<-1
sum(sdata$INVALID_EVTYPE_IND)
fie<-sum(sdata$FATALITIES[(sdata$INVALID_EVTYPE_IND==1)])
fTotal<-sum(sdata$FATALITIES)
fie/fTotal
iie<-sum(sdata$INJURIES[(sdata$INVALID_EVTYPE_IND==1)])
iTotal<-sum(sdata$INJURIES)
iie/iTotal
pdie<-sum(sdata$PROPDMGVAL[(sdata$INVALID_EVTYPE_IND==1)])
pdTotal<-sum(sdata$PROPDMGVAL)
pdie/pdTotal
cdie<-sum(sdata$CROPDMGVAL[(sdata$INVALID_EVTYPE_IND==1)])
cdTotal<-sum(sdata$CROPDMGVAL)
cdie/cdTotal
# Chunk 8
evtypeMap<-read.csv("EVTYPE_MAP.csv")
tidy_sdata <- merge(evtypeMap,sdata,all.y = TRUE)
sum(is.na(tidy_sdata$NOAA_EVTYPE))
# Chunk 9
# aggregate the data by the "tidy" event type for each of the impact types associated with health or economic impact.
# Health - Fatalities
dead <- aggregate(FATALITIES ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
dead$IMPACT_TYPE <- "FATALITIES"
colnames(dead)<- c("NOAA_EVTYPE","IMPACT_VAL","IMPACT_TYPE")
dead$NOAA_EVTYPE <- factor(dead$NOAA_EVTYPE,
levels = dead$NOAA_EVTYPE[order(-dead$IMPACT_VAL)])
dead<-dead[order(-xtfrm(dead$IMPACT_VAL),dead$NOAA_EVTYPE),]
rownames(dead)<-seq(1:nrow(dead))
# Health - Injuries
wounded <- aggregate(INJURIES ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
wounded$IMPACT_TYPE <- "INJURIES"
colnames(wounded)<- c("NOAA_EVTYPE","IMPACT_VAL","IMPACT_TYPE")
wounded$NOAA_EVTYPE <- factor(wounded$NOAA_EVTYPE,
levels = wounded$NOAA_EVTYPE[order(-wounded$IMPACT_VAL)])
wounded<-wounded[order(-xtfrm(wounded$IMPACT_VAL),wounded$NOAA_EVTYPE),]
rownames(wounded)<-seq(1:nrow(wounded))
# Economic - Property Damage
property <- aggregate(PROPDMGVAL ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
property$IMPACT_TYPE <- "PROPDMGVAL"
colnames(property)<- c("NOAA_EVTYPE","IMPACT_VAL","IMPACT_TYPE")
property$NOAA_EVTYPE <- factor(property$NOAA_EVTYPE,
levels = property$NOAA_EVTYPE[order(-property$IMPACT_VAL)])
property<-property[order(-xtfrm(property$IMPACT_VAL),property$NOAA_EVTYPE),]
rownames(property)<-seq(1:nrow(property))
# Economic - Crop Damage
crops <- aggregate(CROPDMGVAL ~ NOAA_EVTYPE, data = tidy_sdata, FUN = sum)
crops$IMPACT_TYPE <- "CROPDMGVAL"
colnames(crops)<- c("NOAA_EVTYPE","IMPACT_VAL","IMPACT_TYPE")
crops$NOAA_EVTYPE <- factor(crops$NOAA_EVTYPE,
levels = crops$NOAA_EVTYPE[order(-crops$IMPACT_VAL)])
crops<-crops[order(-xtfrm(crops$IMPACT_VAL),crops$NOAA_EVTYPE),]
rownames(crops)<-seq(1:nrow(crops))
# Chunk 10
require(ggplot2)
require(grid)
require(gridExtra)
# Health Impact Analysis
gg1<- ggplot(dead[1:5,], aes(x = NOAA_EVTYPE, y = IMPACT_VAL))
gg1<- gg1 + geom_bar(stat = "identity")
gg1<- gg1 + xlab("")
gg1<- gg1 + ylab("Fatalities")
gg1<- gg1 + theme(axis.text.x = element_text(angle=90))
gg2<- ggplot(wounded[1:5,], aes(x = NOAA_EVTYPE, y = IMPACT_VAL))
gg2<- gg2 + geom_bar(stat = "identity")
gg2<- gg2 + xlab("")
gg2<- gg2 + ylab("Injuries")
gg2<- gg2 + theme(axis.text.x = element_text(angle=90))
grid.arrange(gg1, gg2, ncol = 2, top = "Health Impact of Severe Weather in the United States by Event Type")
# Economic Impact Analysis
gg1<- ggplot(property[1:5,], aes(x = NOAA_EVTYPE, y = IMPACT_VAL))
gg1<- gg1 + geom_bar(stat = "identity")
gg1<- gg1 + xlab("")
gg1<- gg1 + ylab("Property Damage")
gg1<- gg1 + theme(axis.text.x = element_text(angle=90))
gg2<- ggplot(wounded[1:5,], aes(x = NOAA_EVTYPE, y = IMPACT_VAL))
gg2<- gg2 + geom_bar(stat = "identity")
gg2<- gg2 + xlab("")
gg2<- gg2 + ylab("Crop Damage")
gg2<- gg2 + theme(axis.text.x = element_text(angle=90))
require(grid)
require(gridExtra)
grid.arrange(gg1, gg2, ncol = 2, top = "Economic Impact (US-$) of Severe Weather in the United States by Event Type")
